/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as LayoutIndexRouteImport } from './routes/_layout.index'
import { Route as LayoutSearchRouteImport } from './routes/_layout.search'
import { Route as LayoutFollowingRouteImport } from './routes/_layout.following'
import { Route as AuthLayoutRouteImport } from './routes/_auth/_layout'
import { Route as LayoutProfileUserIdRouteImport } from './routes/_layout.profile.$userId'
import { Route as LayoutPostPostIdRouteImport } from './routes/_layout.post.$postId'
import { Route as AuthLayoutSignUpRouteImport } from './routes/_auth/_layout.sign-up'
import { Route as AuthLayoutLoginRouteImport } from './routes/_auth/_layout.login'

const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSearchRoute = LayoutSearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutFollowingRoute = LayoutFollowingRouteImport.update({
  id: '/following',
  path: '/following',
  getParentRoute: () => LayoutRoute,
} as any)
const AuthLayoutRoute = AuthLayoutRouteImport.update({
  id: '/_auth/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutProfileUserIdRoute = LayoutProfileUserIdRouteImport.update({
  id: '/profile/$userId',
  path: '/profile/$userId',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutPostPostIdRoute = LayoutPostPostIdRouteImport.update({
  id: '/post/$postId',
  path: '/post/$postId',
  getParentRoute: () => LayoutRoute,
} as any)
const AuthLayoutSignUpRoute = AuthLayoutSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthLayoutLoginRoute = AuthLayoutLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/following': typeof LayoutFollowingRoute
  '/search': typeof LayoutSearchRoute
  '/': typeof LayoutIndexRoute
  '/login': typeof AuthLayoutLoginRoute
  '/sign-up': typeof AuthLayoutSignUpRoute
  '/post/$postId': typeof LayoutPostPostIdRoute
  '/profile/$userId': typeof LayoutProfileUserIdRoute
}
export interface FileRoutesByTo {
  '/following': typeof LayoutFollowingRoute
  '/search': typeof LayoutSearchRoute
  '/': typeof LayoutIndexRoute
  '/login': typeof AuthLayoutLoginRoute
  '/sign-up': typeof AuthLayoutSignUpRoute
  '/post/$postId': typeof LayoutPostPostIdRoute
  '/profile/$userId': typeof LayoutProfileUserIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRouteWithChildren
  '/_auth/_layout': typeof AuthLayoutRouteWithChildren
  '/_layout/following': typeof LayoutFollowingRoute
  '/_layout/search': typeof LayoutSearchRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_auth/_layout/login': typeof AuthLayoutLoginRoute
  '/_auth/_layout/sign-up': typeof AuthLayoutSignUpRoute
  '/_layout/post/$postId': typeof LayoutPostPostIdRoute
  '/_layout/profile/$userId': typeof LayoutProfileUserIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/following'
    | '/search'
    | '/'
    | '/login'
    | '/sign-up'
    | '/post/$postId'
    | '/profile/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/following'
    | '/search'
    | '/'
    | '/login'
    | '/sign-up'
    | '/post/$postId'
    | '/profile/$userId'
  id:
    | '__root__'
    | '/_layout'
    | '/_auth/_layout'
    | '/_layout/following'
    | '/_layout/search'
    | '/_layout/'
    | '/_auth/_layout/login'
    | '/_auth/_layout/sign-up'
    | '/_layout/post/$postId'
    | '/_layout/profile/$userId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/search': {
      id: '/_layout/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof LayoutSearchRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/following': {
      id: '/_layout/following'
      path: '/following'
      fullPath: '/following'
      preLoaderRoute: typeof LayoutFollowingRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_auth/_layout': {
      id: '/_auth/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/profile/$userId': {
      id: '/_layout/profile/$userId'
      path: '/profile/$userId'
      fullPath: '/profile/$userId'
      preLoaderRoute: typeof LayoutProfileUserIdRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/post/$postId': {
      id: '/_layout/post/$postId'
      path: '/post/$postId'
      fullPath: '/post/$postId'
      preLoaderRoute: typeof LayoutPostPostIdRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_auth/_layout/sign-up': {
      id: '/_auth/_layout/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthLayoutSignUpRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_auth/_layout/login': {
      id: '/_auth/_layout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLayoutLoginRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
  }
}

interface LayoutRouteChildren {
  LayoutFollowingRoute: typeof LayoutFollowingRoute
  LayoutSearchRoute: typeof LayoutSearchRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutPostPostIdRoute: typeof LayoutPostPostIdRoute
  LayoutProfileUserIdRoute: typeof LayoutProfileUserIdRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutFollowingRoute: LayoutFollowingRoute,
  LayoutSearchRoute: LayoutSearchRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutPostPostIdRoute: LayoutPostPostIdRoute,
  LayoutProfileUserIdRoute: LayoutProfileUserIdRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface AuthLayoutRouteChildren {
  AuthLayoutLoginRoute: typeof AuthLayoutLoginRoute
  AuthLayoutSignUpRoute: typeof AuthLayoutSignUpRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthLayoutLoginRoute: AuthLayoutLoginRoute,
  AuthLayoutSignUpRoute: AuthLayoutSignUpRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
